================== Tasks ==================
Status  |         Description 
 TODO	| Independent movement and look?  This is a cool 'native VR' thing that we might be able to pull off because WW is open source with a custom InputHandler
 TODO   | Can we get the 'Place Names' layer working again?
 DONE   | Figure out why reducing resolution does not impact framerate
 DONE   | Map WASD to arrow movements          
 TODO   | Remove HUD, or make useful inside Rift
 DONE   | Display in Oculus Rift resolution 1280x800
 TODO	| 'Fast' monoscopic rendering (rasterize only one eye with GPU, then copy pixels to other half)
 TODO   | Do something reasonable with vsync (unclear if that means turning on or off) 
 TODO   | Update README, publish to various forums that project is ready for people to play with
 TODO   | Create JNLP webstart deployment so demo can be easily launched from browser 
 TODO   | Skew the view frusta for left eye appropriately in VRFlyView.doApply() (see http://www.orthostereo.com/geometryopengl.html and http://www.roadtovr.com/vr-expert-to-oculus-rift-devs-make-sure-youre-doing-3d-right/)
 DONE   | Display in Full Screen  
 DONE   | Use basic First Person view
 DONE   | Create project on GitHub
 DONE	| Eliminate distortion resulting from changing viewport aspect ratio
 DONE   | Implement 110 degree field of view
 DONE   | Find good default interpupillary distance, and apply as camera offset during SBS rendering (see Valve's 'middle eye' model)
 DONE   | Apply Barrel Distortion
 DONE   | SBS Mono rendering
 DONE   | SBS stereo rendering
 DONE   | Adaptive/Heuristic methods for adjusting interpupillary distance for greatest effect (without headaches) when navigating globe
 DONE   | Implement basic keyboard/mouse controls so that you get a reasonable first-person controllable view
 DONE   | Create README targeted at users who just want to run the project in current state
 DONE   | Determine appropriate license for source (probably just take WorldWind's NOSA license?) and apply it - include 38leinaD's license for JRift
 DONE   | Java JNI wrapper for Rift DLL (JRift? Or http://www.softwarepioneering.com/2013/05/java-c-wrapper-for-oculus-rift.html)
 DONE   | Manipulate camera pitch/yaw/roll using data from Rift DLL
 DONE   | Make sure everything works with 32-bit and 64-bit Java runtimes
 DONE   | Devise build process that generates most convenient distribution for users
 DONE   | Turn on best imagery source (bing?)
 DONE   | Implement keyboard shortcuts for 'fast travel' to compelling locations
 DONE   | With extreme head roll, stereoscopy is not working correctly for objects which are close to the camera (probably a problem with the camera offset!)
 
================= Development ==================
**** IDE ****
WorldwindVR is being developed in Eclipse, which can be downloaded at http://www.eclipse.org/downloads/

*** Version Control ****
The WorldwindVR project is hosted in Git.  Eclipse Juno comes prebuilt with the EGit plug-in.

*** Checking out project from Git and installing as Eclipse project ***
(1) Copy the following to clipboard: https://github.com/danielr2e/worldwind-vr.git
(2) Window -> Show View -> Other... -> Git -> Git Repositories
(3) In the Git Repositories window, right click -> Paste Repository Path or URI
(4) Enter your Git account credentials and check 'Store in Secure Store' -> Next -> Next -> Finish
(5) File ->  New -> Java Project 
(6) Create project with name worldwind-vr, which will automatically build a project using the Git directory.
(7) Right click project -> Team -> Share Project -> Git -> Finish (this will actually connect it to Git)

*** Checking out JRift ***
(1) Copy the following to clipboard: https://github.com/38leinaD/JRift.git
(2) Window -> Show View -> Other... -> Git -> Git Repositories
(3) In the Git Repositories window, right click -> Paste Repository Path or URI
(4) Create the JRift directory using wizard.
(5) File ->  New -> Java Project 
(6) Create project with name JRift, which will automatically build a project using the Git directory.
 
================= Other Notes ================

Minecrift probably has the best branch of JRift:
 - https://github.com/mabrowning/JRift

This may provide info on how to render SBS 3D:
 - probably just need to change the viewport before rendering each eye!! http://www.felixgers.de/teaching/jogl/viewport.html
 - will also need to fix whatever is causing stereo to only render if pitch is between 50 and 90 degrees
 - http://fivedots.coe.psu.ac.th/~ad/jg2/jogl4/index.html
 - combine with technique for moving view and rendering both as in StereoOptionSceneController.doDrawToStereoDevice(DrawContext dc)
 - http://stackoverflow.com/questions/5002254/adapt-existing-code-for-opengl-stereoscopic-rendering
How to enable vsync?
 -  // Enable VSync
    gl.setSwapInterval(1);
 - from http://stackoverflow.com/questions/6497304/when-using-textures-in-a-jogl-application-ati-graphics-cards-all-eventually-cra
 
Will likely need to use gov.nasa.worldwind.view.firstperson.BasicFlyView

(1) Someone will probably write a JNI wrapper for us, but if not we have to.
(2) Someone will probably (even sooner than JNI) write an OpenGL shader or example that could solve both the lens distortion and SBS frame drawing problem for us.


Notes on Optimization:
 - much CPU seems to go to tiling, which is driven by the TiledImageLayer draw method
  - assembleTiles() and maybe checkTextureExpiration() seem particularly problematic
 - part of the problem may be that WorldWind was not meant for running at a given FPS, maybe we can eliminate 
   some of these calculations on 50%-90% of frames?
 - Mystery: why does frame rate go down at lower resolutions?
  - gov.nasa.worldwind.AbstractSceneController.pick appears to be taking 4X as long (10% of CPU time total at lower resolution)  
 

============== Fixes for Exceptions you might encounter ===========

*** EXCEPTION ***
Exception in thread "main" java.lang.UnsatisfiedLinkError: C:\Users\dtuohy\AppData\Local\Temp\jogamp_0000\file_cache\jln8738110590367623316\jln2605075625072842271\gluegen-rt.dll: Can't find dependent libraries
	at java.lang.ClassLoader$NativeLibrary.load(Native Method)
	at java.lang.ClassLoader.loadLibrary0(Unknown Source)
	at java.lang.ClassLoader.loadLibrary(Unknown Source)
	at java.lang.Runtime.load0(Unknown Source)
	at java.lang.System.load(Unknown Source)
	at com.jogamp.common.jvm.JNILibLoaderBase.loadLibraryInternal(JNILibLoaderBase.java:437)
	at com.jogamp.common.jvm.JNILibLoaderBase.access$000(JNILibLoaderBase.java:59)

*** SOLUTION ***
Make sure you are running with a 32-bit version of Java.
	